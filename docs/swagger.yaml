basePath: /api
definitions:
  domain.Company:
    properties:
      amountOfEmployees:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      registered:
        type: boolean
      type:
        type: string
      updatedAt:
        type: string
    type: object
  domain.User:
    description: User stores personal information and account status. Passwords are
      stored as hashes for security.
    properties:
      createdAt:
        type: string
      email:
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/domain.UserStatus'
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  domain.UserStatus:
    description: UserStatus can be active, inactive, or deleted.
    enum:
    - active
    - inactive
    - deleted
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusDeleted
  server.CreateCompanyRequest:
    properties:
      amountOfEmployees:
        minimum: 1
        type: integer
      description:
        maxLength: 3000
        type: string
      name:
        maxLength: 15
        type: string
      registered:
        type: boolean
      type:
        enum:
        - Corporations
        - NonProfit
        - Cooperative
        - Sole Proprietorship
        type: string
    required:
    - amountOfEmployees
    - name
    - registered
    - type
    type: object
  server.ErrorResponse:
    description: ErrorResponse provides a consistent error format.
    properties:
      error:
        type: string
    type: object
  server.LoginRequest:
    description: LoginRequest validates input for user login. Email must be a valid
      email address. Password is required.
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  server.LoginResponse:
    description: LoginResponse includes the authenticated user's details.
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  server.RegisterUserRequest:
    description: RegisterUserRequest validates input for user registration. Name must
      be 5-100 characters long. Email must be a valid email address. Password must
      be at least 8 characters long.
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 5
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  server.RegisterUserResponse:
    description: RegisterUserResponse includes the created user's details.
    properties:
      user:
        $ref: '#/definitions/domain.User'
    type: object
  server.UpdateCompanyRequest:
    properties:
      amountOfEmployees:
        minimum: 1
        type: integer
      description:
        maxLength: 3000
        type: string
      name:
        maxLength: 15
        type: string
      registered:
        type: boolean
      type:
        enum:
        - Corporations
        - NonProfit
        - Cooperative
        - Sole Proprietorship
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: XM API
paths:
  /api/companies:
    post:
      consumes:
      - application/json
      description: Creates a new company with the provided details
      parameters:
      - description: Company creation details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.CreateCompanyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Create a new company
      tags:
      - companies
  /api/companies/{id}:
    delete:
      consumes:
      - application/json
      description: Soft deletes a company by setting its deleted_at timestamp
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Delete a company
      tags:
      - companies
    get:
      consumes:
      - application/json
      description: Retrieves a company's details by its ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get a company by ID(UUID)
      tags:
      - companies
    patch:
      consumes:
      - application/json
      description: Updates a company's details
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Company update details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.UpdateCompanyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Update a company
      tags:
      - companies
  /api/login:
    post:
      consumes:
      - application/json
      description: |-
        Verifies password using bcrypt comparison.
        Generates new JWT access token using ECDSA encryption.
        Sets HTTP-only cookie with new access token.
      parameters:
      - description: User login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Authenticate a user and provide access token
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: |-
        Hashes password using bcrypt before storage.
        Generates JWT access token using ECDSA encryption.
        Sets HTTP-only cookie with access token.
      parameters:
      - description: User registration details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/server.RegisterUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /health:
    get:
      description: Check the health of the database connection.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Check the health of the database connection.
      tags:
      - health
swagger: "2.0"
